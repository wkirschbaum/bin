#!/usr/bin/env ruby

require 'whois'
require 'whois-parser'
require 'colorize'
require 'readline'

class FindDomain
  def initialize(domain, store)
    @store = store
    @status = :starting
    @domain = domain
    @thread = nil
  end

  def find
    @thread = Thread.new do
      r = Whois.whois(@domain).parser
      if r.available?
        @status = :available
      else
        @status = :unavailable
      end
    rescue
      @status = :error
    end
  end

  def print_message
    # Join thread or timeout before displaying
    @thread&.join(10)

    case @status
    when :available
      @store.write(@domain)
      puts "#{@domain} is available.".colorize(:green)
    when :unavailable
      puts "#{@domain} is being used.".colorize(:yellow)
    when :error
      puts "#{@domain} returned an error.".colorize(:red)
    when :starting
      puts "#{@domain} timed out." # assume it timed out, because we are calling it above
    end
  end
end

class Store
  def initialize
    @file = File.expand_path('~/.domainsfind_available')
  end

  def write(domain)
    File.open(@file, 'a') { |file| file.puts domain }
  end
end

def expand(name)
  [
    ".co.za",
    ".com",
    ".net",
  ].map { |ext| "#{name}#{ext}" }
end

def find_domains(domain)
  store = Store.new
  domains = []
  if domain.include?('.')
    domains << domain
  else
    domains += expand(domain)
  end

  domains
    .map { |name| FindDomain.new(name, store) }
    .each(&:find)
    .each(&:print_message)
end

trap("SIGINT") do
  exit!
end

puts "ctr-c to exit"
while buf = Readline.readline("> ").strip
  find_domains(buf)
end
