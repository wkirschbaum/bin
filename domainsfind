#!/usr/bin/env ruby

require 'whois'
require 'whois-parser'
require 'colorize'
require 'readline'

def expand(name)
  [
    ".co.za",
    ".com",
    ".net"
  ].map { |ext| "#{name}#{ext}" }
end

class FindDomain
  def initialize(domain)
    @status = :starting
    @domain = domain
    @thread = nil
  end

  def find
    @thread = Thread.new do
      r = Whois.whois(@domain).parser
      if r.available?
        @status = :available
      else
        @status = :unavailable
      end
    rescue
      @status = :error
    end
  end

  def print_message
    # Join thread or timeout before displaying
    @thread&.join(10)

    case @status
    when :available
      puts "#{@domain} is available.".colorize(:green)
    when :unavailable
      puts "#{@domain} is being used.".colorize(:yellow)
    when :error
      puts "#{@domain} returned an error.".colorize(:red)
    when :starting
      puts "#{@domain} timed out."
    end
  end
end
  
def find_domains(domain)
  domains = []
  if domain.include?('.')
    domains << domain
  else
    domains += expand(domain)
  end
  
  domains
    .map { |name| FindDomain.new(name) }
    .each(&:find)
    .each(&:print_message)
end
  
trap("SIGINT") do
  exit!
end

puts "ctr-c to exit"
while buf = Readline.readline("> ").strip
  find_domains(buf)
end
